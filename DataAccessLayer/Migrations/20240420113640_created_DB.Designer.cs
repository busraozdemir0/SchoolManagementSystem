// <auto-generated />
using System;
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240420113640_created_DB")]
    partial class createdDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Atlas Koleji olarak 2009 yılında başladığımız yolculuğumuzda, ortaokul ve lise öğrencilerimizin başarıya ulaşmasını hedefliyor aynı zamanda hayalindeki lise ve üniversiteleri kazanmaları için elimizden geleni yapıyoruz. Okulda yapılan eğitimin yanı sıra web sitemiz sayesinde konuları pekiştirebilme ve birebir öğretmenle iletişime geçme imkanına sahip olabilecekler. Bu güne kadar mezunlarımızın çoğuna Türkiye'de oldukça ünlü okulları kazanabilmelerine vesile olduk. Hemen siz de iletişime geçin ve uygun fiyatlarla kolejimize kaydolarak hayallerinize ulaşın.",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 46, DateTimeKind.Local).AddTicks(6573),
                            IsDeleted = false,
                            SchoolName = "Atlas Koleji",
                            Title = "Çocuğunuz İçin En İyi Seçim Biziz"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MapLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportEMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressInfo = "Düzce Ünv., 81620 Yörük/Düzce Merkez/Düzce",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 46, DateTimeKind.Local).AddTicks(8206),
                            EMail = "atlaskolej@gmail.com",
                            IsDeleted = false,
                            MapLocation = "https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d12062.0903918608!2d31.180443!3d40.904286!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x409da0c35c97aa71%3A0x93cc0b0387c8fc40!2zRMO8emNlIMOcbml2ZXJzaXRlc2kgTcO8aGVuZGlzbGlrIEZha8O8bHRlc2k!5e0!3m2!1str!2str!4v1711622193416!5m2!1str!2str\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade",
                            PhoneNumber = "(111) 111 1111",
                            SupportEMail = "destek@atlaskoleji.com"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c54083a8-1ff1-43d0-9b51-c2fea5b3e60d"),
                            ConcurrencyStamp = "559b056f-9edf-4a13-bb92-a4011e025669",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("23420044-c9ae-462e-8317-88db8c734de1"),
                            ConcurrencyStamp = "8be10ad4-d5ca-4e74-95d1-05cf603c9b9d",
                            Name = "Öğretmen",
                            NormalizedName = "ÖĞRETMEN"
                        },
                        new
                        {
                            Id = new Guid("2157a98d-0223-4ae6-afb9-5f586e9ba4ae"),
                            ConcurrencyStamp = "db425899-0bf9-4db3-80df-781be5bfb8a4",
                            Name = "Öğrenci",
                            NormalizedName = "ÖĞRENCI"
                        },
                        new
                        {
                            Id = new Guid("8db4507c-ee16-4f5f-82a6-d187a2acb21d"),
                            ConcurrencyStamp = "da9661cd-4282-4c2d-b2c2-968361aa8cdb",
                            Name = "Kullanıcı",
                            NormalizedName = "KULLANICI"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentNo")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAbout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a61f597b-2c8d-4cb4-80a6-6822178322a8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff00a1f8-0be6-4dbe-92c0-3e77efe6ee45",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Erkek",
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEB0IiooeRBKhnwAUTpSb9uMjYK92wakZWye/U64thKRLVIx87p4Xw6DLlMbBZN4Y/Q==",
                            PhoneNumber = "(111) 111 1111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ed0de48e-cdb5-4c12-89b1-33e1604848c0",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "837e5e70-d75a-4065-803d-46c45363d091",
                            Email = "ogretmen@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Kadın",
                            LockoutEnabled = false,
                            Name = "Öğretmen",
                            NormalizedEmail = "OGRETMEN@GMAIL.COM",
                            NormalizedUserName = "OGRETMEN",
                            PasswordHash = "AQAAAAIAAYagAAAAENfwT5e5M/dZ4/jC7j6M+qyvN1u0RGJbaihNWIebag06UuZHcRVYv0wYIzQPVzcV7A==",
                            PhoneNumber = "(222) 222 2222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5c595435-f4f2-4433-8932-192827567d48",
                            Surname = "Öğretmen",
                            TwoFactorEnabled = false,
                            UserName = "ogretmen"
                        },
                        new
                        {
                            Id = new Guid("a9949a78-7413-484e-a62a-eb0fb01b7f76"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "277b813c-d5e4-4299-b2ea-8dc0539c3ef2",
                            Email = "ogrenci@gmail.com",
                            EmailConfirmed = true,
                            Gender = "Kadın",
                            GradeId = 1,
                            LockoutEnabled = false,
                            Name = "Öğrenci",
                            NormalizedEmail = "OGRENCİ@GMAIL.COM",
                            NormalizedUserName = "OGRENCİ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJlnKRH4d7LYECQ/SpH7pNaka3KGuqjyZ6YB/U8UBIhEKnuXAIJY66eTMcp/Mgp4+A==",
                            PhoneNumber = "(333) 333 3333",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "accd793f-c484-4b8f-8892-6048af51e27c",
                            StudentNo = 1234,
                            Surname = "Öğrenci",
                            TwoFactorEnabled = false,
                            UserName = "ogrenci"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a61f597b-2c8d-4cb4-80a6-6822178322a8"),
                            RoleId = new Guid("c54083a8-1ff1-43d0-9b51-c2fea5b3e60d")
                        },
                        new
                        {
                            UserId = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb"),
                            RoleId = new Guid("23420044-c9ae-462e-8317-88db8c734de1")
                        },
                        new
                        {
                            UserId = new Guid("a9949a78-7413-484e-a62a-eb0fb01b7f76"),
                            RoleId = new Guid("2157a98d-0223-4ae6-afb9-5f586e9ba4ae")
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EntityLayer.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("EntityLayer.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(2940),
                            IsDeleted = false,
                            Name = "9. Sınıf"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(2962),
                            IsDeleted = false,
                            Name = "10. Sınıf"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(2964),
                            IsDeleted = false,
                            Name = "11. Sınıf"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(2965),
                            IsDeleted = false,
                            Name = "12. Sınıf"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EntityLayer.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonCredit")
                        .HasColumnType("int");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bb1842f-d0be-4bdc-bede-7d9f5678af2e"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(4786),
                            GradeId = 1,
                            IsDeleted = false,
                            LessonCode = "B100",
                            LessonCredit = 2,
                            LessonName = "Bilgisayar Sistemleri",
                            UserId = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb")
                        },
                        new
                        {
                            Id = new Guid("361182e6-e970-4ab8-b192-bb90ce39f1cf"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(4829),
                            GradeId = 2,
                            IsDeleted = false,
                            LessonCode = "M102",
                            LessonCredit = 5,
                            LessonName = "Matematik",
                            UserId = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb")
                        },
                        new
                        {
                            Id = new Guid("ae2fc38e-88fc-43fe-bd4f-fe202a28464e"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(4833),
                            GradeId = 3,
                            IsDeleted = false,
                            LessonCode = "F205",
                            LessonCredit = 3,
                            LessonName = "Fizik",
                            UserId = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb")
                        },
                        new
                        {
                            Id = new Guid("e68f0fce-4313-4d18-ac11-1fa17a99ca42"),
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 298, DateTimeKind.Local).AddTicks(4836),
                            GradeId = 4,
                            IsDeleted = false,
                            LessonCode = "B101",
                            LessonCredit = 3,
                            LessonName = "Biyoloji",
                            UserId = new Guid("97b90210-a67f-426d-be2c-8adcab3100fb")
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonDocuments");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PerformanceScore")
                        .HasColumnType("float");

                    b.Property<double?>("Score1")
                        .HasColumnType("float");

                    b.Property<double?>("Score2")
                        .HasColumnType("float");

                    b.Property<int>("StudentNo")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonScores");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeVideoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("VideoId");

                    b.ToTable("LessonVideos");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonVideoVisitor", b =>
                {
                    b.Property<Guid>("LessonVideoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("LessonVideoId", "VisitorId");

                    b.HasIndex("VisitorId");

                    b.ToTable("LessonVideoVisitors");
                });

            modelBuilder.Entity("EntityLayer.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverUserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderUserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EntityLayer.Entities.NewsLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NewsLetters");
                });

            modelBuilder.Entity("EntityLayer.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4dced7f-708b-4a08-955e-3b793c08d94b"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5040),
                            IsDeleted = false,
                            Title = "Deneme"
                        },
                        new
                        {
                            Id = new Guid("3288f782-f8bb-49c4-b631-b73b30ba3cb2"),
                            Content = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5060),
                            IsDeleted = false,
                            Title = "Gelecekte Yapay Zeka"
                        },
                        new
                        {
                            Id = new Guid("59d556c3-cef0-4a9d-8f8e-504220c75404"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5062),
                            IsDeleted = false,
                            Title = "Lorem İpsum"
                        },
                        new
                        {
                            Id = new Guid("ea6ccbaf-3081-4737-9dc1-984a62d89f90"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5064),
                            IsDeleted = false,
                            Title = "Where can I get some?"
                        },
                        new
                        {
                            Id = new Guid("fa7e12ae-79e8-49d3-aa32-f230a4541b71"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5121),
                            IsDeleted = false,
                            Title = "Okulumuz Türkiye En'leri Arasında"
                        },
                        new
                        {
                            Id = new Guid("f3932317-dba3-45c9-8f9e-b6a9603f14e8"),
                            Content = "There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary",
                            CreatedBy = "Undefined",
                            CreatedDate = new DateTime(2024, 4, 20, 14, 36, 40, 299, DateTimeKind.Local).AddTicks(5123),
                            IsDeleted = false,
                            Title = "Bir Ödül Daha Kazandık"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("EntityLayer.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("EntityLayer.Entities.About", b =>
                {
                    b.HasOne("EntityLayer.Entities.Image", "Image")
                        .WithMany("Abouts")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityLayer.Entities.Announcement", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", "Role")
                        .WithMany("Announcements")
                        .HasForeignKey("RoleId");

                    b.HasOne("EntityLayer.Entities.AppUser", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.HasOne("EntityLayer.Entities.Grade", "Grade")
                        .WithMany("Users")
                        .HasForeignKey("GradeId");

                    b.HasOne("EntityLayer.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId");

                    b.Navigation("Grade");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserClaim", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserLogin", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserRole", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUserToken", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.Lesson", b =>
                {
                    b.HasOne("EntityLayer.Entities.Grade", "Grade")
                        .WithMany("Lessons")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", "User")
                        .WithMany("Lessons")
                        .HasForeignKey("UserId");

                    b.Navigation("Grade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonDocument", b =>
                {
                    b.HasOne("EntityLayer.Entities.Document", "Document")
                        .WithMany("LessonDocuments")
                        .HasForeignKey("DocumentId");

                    b.HasOne("EntityLayer.Entities.Lesson", "Lesson")
                        .WithMany("LessonDocuments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonScore", b =>
                {
                    b.HasOne("EntityLayer.Entities.Lesson", "Lesson")
                        .WithMany("LessonScores")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", "User")
                        .WithMany("LessonScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonVideo", b =>
                {
                    b.HasOne("EntityLayer.Entities.Lesson", "Lesson")
                        .WithMany("LessonVideos")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Video", "Video")
                        .WithMany("LessonVideos")
                        .HasForeignKey("VideoId");

                    b.Navigation("Lesson");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonVideoVisitor", b =>
                {
                    b.HasOne("EntityLayer.Entities.LessonVideo", "LessonVideo")
                        .WithMany("LessonVideoVisitors")
                        .HasForeignKey("LessonVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Visitor", "Visitor")
                        .WithMany("LessonVideoVisitor")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonVideo");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("EntityLayer.Entities.Message", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", "ReceiverUser")
                        .WithMany("ReceiverUserMessages")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", "SenderUser")
                        .WithMany("SenderUserMessages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("EntityLayer.Entities.Report", b =>
                {
                    b.HasOne("EntityLayer.Entities.Image", "Image")
                        .WithMany("Reports")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppRole", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("LessonScores");

                    b.Navigation("Lessons");

                    b.Navigation("ReceiverUserMessages");

                    b.Navigation("SenderUserMessages");
                });

            modelBuilder.Entity("EntityLayer.Entities.Document", b =>
                {
                    b.Navigation("LessonDocuments");
                });

            modelBuilder.Entity("EntityLayer.Entities.Grade", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Entities.Image", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Reports");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Entities.Lesson", b =>
                {
                    b.Navigation("LessonDocuments");

                    b.Navigation("LessonScores");

                    b.Navigation("LessonVideos");
                });

            modelBuilder.Entity("EntityLayer.Entities.LessonVideo", b =>
                {
                    b.Navigation("LessonVideoVisitors");
                });

            modelBuilder.Entity("EntityLayer.Entities.Video", b =>
                {
                    b.Navigation("LessonVideos");
                });

            modelBuilder.Entity("EntityLayer.Entities.Visitor", b =>
                {
                    b.Navigation("LessonVideoVisitor");
                });
#pragma warning restore 612, 618
        }
    }
}
